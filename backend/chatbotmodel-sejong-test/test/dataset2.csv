의도(Intent),개체명(NER),언어(Language),키워드(Keyword),설명(Description),타이틀(Title),질문(Query),답변(Answer),답변이미지
정의,B_LV1,c,출력,printf 출력함수 출력,출력함수 printf,{B_LV1}에 대해 알려줘,"답변: 출력함수 printf를 사용하면 화면에 출력할 수 있습니다. printf(""...""); 와 같이 print함수 안에서 큰 따옴표를 사용하면 원하는 문자열을 출력할 수 있습니다. 형식 지정자를 사용해서 출력하면 원하는 형식의 데이터를 출력할 수 있습니다. Int형의 형식 지정자는 %d, char형의 형식 지정자는 %c, float와 double형의 형식 지정자는 %f, 문자열의 형식 지정자는 %s 입니다.

예시) 
int num = 100;
printf(""num = %d"", num);
실행결과) num = 100",
정의,B_LV1,c,printf,,,{B_LV1}에 대해 알려줘,"답변: 출력함수 printf를 사용하면 화면에 출력할 수 있습니다. printf(""...""); 와 같이 print함수 안에서 큰 따옴표를 사용하면 원하는 문자열을 출력할 수 있습니다. 형식 지정자를 사용해서 출력하면 원하는 형식의 데이터를 출력할 수 있습니다. Int형의 형식 지정자는 %d, char형의 형식 지정자는 %c, float와 double형의 형식 지정자는 %f, 문자열의 형식 지정자는 %s 입니다.

예시) 
int num = 100;
printf(""num = %d"", num);
실행결과) num = 100",
정의,B_LV1,c,출력함수,,,{B_LV1}에 대해 알려줘,"답변: 출력함수 printf를 사용하면 화면에 출력할 수 있습니다. printf(""...""); 와 같이 print함수 안에서 큰 따옴표를 사용하면 원하는 문자열을 출력할 수 있습니다. 형식 지정자를 사용해서 출력하면 원하는 형식의 데이터를 출력할 수 있습니다. Int형의 형식 지정자는 %d, char형의 형식 지정자는 %c, float와 double형의 형식 지정자는 %f, 문자열의 형식 지정자는 %s 입니다.

예시) 
int num = 100;
printf(""num = %d"", num);
실행결과) num = 100",
정의,B_LV1,c,줄바꿈,줄바꿈 개행 출력,줄바꿈 출력,{B_LV1}에 대해 알려줘,"답변: 줄 바꿈 기호는 \n 또는 역슬래시n 입니다. 명령을 두줄에 걸쳐 작성한다고 해서 줄 바꿈이 일어나지 않습니다.  

예시) printf(""Hello World!\n"");",
정의,B_LV1,c,개행,,,{B_LV1}에 대해 알려줘,"답변: 줄 바꿈 기호는 \n 또는 역슬래시n 입니다. 명령을 두줄에 걸쳐 작성한다고 해서 줄 바꿈이 일어나지 않습니다.  

예시) printf(""Hello World!\n"");",
정의,B_LV1,c,탭 출력,탭 tab 출력,탭 출력,{B_LV1}에 대해 알려줘,"답변: 탭 기호는 \t 또는 역슬래시t 입니다. 

예시) printf(""\t Hello World!"");
실행 결과)      Hello World!",
정의,B_LV1,c,tab 출력,,,{B_LV1}에 대해 알려줘,"답변: 탭 기호는 \t 또는 역슬래시t 입니다. 

예시) printf(""\t Hello World!"");
실행 결과)      Hello World!",
정의,B_LV1,c,따옴표 출력,기호 출력 따옴표 출력,따옴표 출력,{B_LV1}에 대해 알려줘,"답변: 큰 따옴표/작은 따옴표를 출력하려면 \또는 역슬래시를 따옴표 기호 앞에 붙여서 사용하세요. 
예시) printf(""\""Hello World!\""""); 
실행 결과) ""Hello World""",
정의,B_LV1,c,큰따옴표 출력,,,{B_LV1}에 대해 알려줘,"답변: 큰 따옴표/작은 따옴표를 출력하려면 \또는 역슬래시를 따옴표 기호 앞에 붙여서 사용하세요. 
예시) printf(""\""Hello World!\""""); 
실행 결과) ""Hello World""",
정의,B_LV1,c,작은따옴표 출력,,,{B_LV1}에 대해 알려줘,"답변: 큰 따옴표/작은 따옴표를 출력하려면 \또는 역슬래시를 따옴표 기호 앞에 붙여서 사용하세요. 
예시) printf(""\""Hello World!\""""); 
실행 결과) ""Hello World""",
정의,B_LV1,c,퍼센트 출력,퍼센트 출력,퍼센트 출력,{B_LV1}에 대해 알려줘,"답변: % 기호를 출력하려면 ""%%""와 같이 2번 연속으로 사용하세요.

예시) printf(""퍼센트 출력: %%"");
실행 결과) 퍼센트 출력: %\n",
정의,B_LV1,c,변수 선언,변수 선언,변수 선언,{B_LV1}에 대해 알려줘,"답변: 변수란 값을 저장할 수 있는 메모리 공간입니다. 변수를 사용하려면 먼저 변수 선언을 해주어야 합니다. 변수 선언은 변수의 자료형, 이름을 지정해주는 것입니다. 자료형은 정수형, 문자형, 부동소수점형 등 어떤 형식의 값을 변수에 저장할 것인지 지정하는 것으로 변수명 앞에 붙여서 사용합니다. 변수명은 용도를 알아볼 수 있도록 의미를 부여하는 것이 좋습니다. 

예시) int sum;
double average;",
정의,B_LV1,c,변수 초기화,변수 초기화,변수 초기화,{B_LV1}에 대해 알려줘,"답변: 초기화란 데이터를 변수에 저장하는 것입니다. 초기화는 변수 선언과 동시에 할 수도 있습니다.

예시) int num = 100;",
정의,B_LV1,c,변수명,변수명 변수이름  ,변수명 짓기,{B_LV1}에 대해 알려줘,"답변: 변수명은 용도를 알아볼 수 있도록 의미를 부여하는 것이 좋습니다.
변수를 작명할때 유의사항은 다음과 같습니다.

1. 변수의 이름은 알파벳, 숫자, 언더바( _ )로 구성되며 공백이 포함될 수 없다.
2. 변수의 이름은 숫자로 시작할 수 없다. 
3. int, if, case 등 c언어에서 키워드로 예약된 단어는 변수명으로 사용할 수 없다.
",
정의,B_LV1,c,변수 이름,,,{B_LV1}에 대해 알려줘,"답변: 변수명은 용도를 알아볼 수 있도록 의미를 부여하는 것이 좋습니다.
변수를 작명할때 유의사항은 다음과 같습니다.

1. 변수의 이름은 알파벳, 숫자, 언더바( _ )로 구성되며 공백이 포함될 수 없다.
2. 변수의 이름은 숫자로 시작할 수 없다. 
3. int, if, case 등 c언어에서 키워드로 예약된 단어는 변수명으로 사용할 수 없다.
",
정의,B_LV1,c,자료형,자료형,자료형,{B_LV1}에 대해 알려줘,"답변:  자료형이란 변수에 저장될 데이터의 종류를 의미합니다. 변수에 값을 담기 전에 정수, 실수, 문자, 문자열 등 값의 종류 그리고 값의 범위에 따라 지정하는 것으로 변수 앞에 붙여서 사용합니다. 정수형 자료형으로는 int, char, short, long 등이 있습니다. 실수형 자료형으로는 float, double, long double 등이 있습니다.",
정의,B_LV1,c,입력,입력 입력함수 scanf 키모드입력,입력함수 scanf,{B_LV1}에 대해 알려줘,"답변: scanf를 사용하여 키보드 입력을 받을 수 있습니다. 입력 받고자 하는 값의 자료형에 맞는 형식지정자와 입력값을 넣을 변수명을 입력해주어야 합니다. 입력 형식은 scanf(""형식 지정자"", &변수명); 입니다.
만약 정수형 변수인 num에 값을 입력하고 싶다면 다음과 같이 입력해주면 됩니다. 
예시) scanf(""%d"", &num);",
정의,B_LV1,c,scanf 입력,,,{B_LV1}에 대해 알려줘,"답변: scanf를 사용하여 키보드 입력을 받을 수 있습니다. 입력 받고자 하는 값의 자료형에 맞는 형식지정자와 입력값을 넣을 변수명을 입력해주어야 합니다. 입력 형식은 scanf(""형식 지정자"", &변수명); 입니다.
만약 정수형 변수인 num에 값을 입력하고 싶다면 다음과 같이 입력해주면 됩니다. 
예시) scanf(""%d"", &num);",
정의,B_LV1,c,키보드입력,,,{B_LV1}에 대해 알려줘,"답변: scanf를 사용하여 키보드 입력을 받을 수 있습니다. 입력 받고자 하는 값의 자료형에 맞는 형식지정자와 입력값을 넣을 변수명을 입력해주어야 합니다. 입력 형식은 scanf(""형식 지정자"", &변수명); 입니다.
만약 정수형 변수인 num에 값을 입력하고 싶다면 다음과 같이 입력해주면 됩니다. 
예시) scanf(""%d"", &num);",
정의,B_LV1,c,조건문,조건문,조건문,{B_LV1}에 대해 알려줘,"답변: 조건문이란 조건에 따라 프로그램의 흐름을 바꾸는 구문입니다. 조건을 표현하기 위해서는 관계 연산자와 논리연산자를 이용합니다. 대표적인 조건문으로는 if문, if ~else문, switch문 등이 있습니다.",
정의,B_LV1,c,관계연산자,관계연산자 연산자,관계연산자,{B_LV1}에 대해 알려줘,"답변: 관계연산자는 조건문에서 조건을 표현하기 위해 사용됩니다.
x < y : x가 y보다 작으면 참
x > y : x가 y보다 크면 참
x == y : x와 y가 같으면 참
x != y : x와 y가 다르면 참
x <= y : x가 y보다 작거나 같으면 참
x >= y : x가 y보다 크거나 같으면 참",
정의,B_LV1,c,조건 삼항 연산자,조건 삼항 연산자,조건 삼항 연산자,{B_LV1}에 대해 알려줘,"답변: 조건 연산자를 사용하면 if ~else 문을 간결하게 사용할 수 있습니다.
조건? A: B 형태로 이루어져 있습니다. 조건이 참이면 A가 반환되고 조건이 거짓이면 B가 반환됩니다.

예시) x = (y>0)? 10: 20;
설명) y가 0보다 크면 x에 10이 대입되고, y가 0보다 작거나 같으면 20이 대입됩니다.",
정의,B_LV1,c,논리 연산자,논리연산자 연산자,논리 연산자,{B_LV1}에 대해 알려줘,"답변: 논리 연산자는 두개 이상의 조건 또는 연산식을 하나로 묶어서 참/거짓을 판단하는 연산자입니다. 대표적으로 &&, ||, ! 연산자가 있습니다.
A && B : AND연산자, A와 B가 모두 참이면 참
A || B : OR연산자, A와 B 둘 중의 하나라도 참이면 참
!A :  NOT연산자, 참은 거짓으로, 거짓은 참으로",
정의,B_LV1,c,if문,if if문 조건문 ,if문,{B_LV1}에 대해 알려줘,"답변: 원하는 조건과 조건이 참일때 실행하고자 하는 명령을 작성해주어야 합니다. if(조건) 명령문 과 같은 형식으로 사용할 수 있습니다. 하나의 if문 안에서 두개 이상의 명령문을 실행할 경우 중괄호 { } 를 사용해주어야 합니다. 
예시)
if(age < 19){
         printf(""19세 미만입니다."");
         printf(""서비스를 이용할 수 없습니다."");
}",
정의,B_LV1,c,if,,,{B_LV1}에 대해 알려줘,"답변: 원하는 조건과 조건이 참일때 실행하고자 하는 명령을 작성해주어야 합니다. if(조건) 명령문 과 같은 형식으로 사용할 수 있습니다. 하나의 if문 안에서 두개 이상의 명령문을 실행할 경우 중괄호 { } 를 사용해주어야 합니다. 
예시)
if(age < 19){
         printf(""19세 미만입니다."");
         printf(""서비스를 이용할 수 없습니다."");
}",
정의,B_LV1,c,elif문,elif문 elseif문 조건문,else if문,{B_LV1}에 대해 알려줘,"답변: if문과 달리 if문이 거짓일 때 실행하려는 명령문을 넣을 수 있습니다. else if를 사용하여 조건을 여러 개 사용할 수도 있습니다.
if(조건문 A) {
      조건 A가 참일 때 실행하려는 명령문
}else if(조건문 B){
      조건A가 거짓이고 조건 B가 참일 때 실행하려는 명령문
}else{
      조건 A, B가 모두 거짓일 때 실행하려는 명령문
}",
정의,B_LV1,c,else if문,,,{B_LV1}에 대해 알려줘,"답변: if문과 달리 if문이 거짓일 때 실행하려는 명령문을 넣을 수 있습니다. else if를 사용하여 조건을 여러 개 사용할 수도 있습니다.
if(조건문 A) {
      조건 A가 참일 때 실행하려는 명령문
}else if(조건문 B){
      조건A가 거짓이고 조건 B가 참일 때 실행하려는 명령문
}else{
      조건 A, B가 모두 거짓일 때 실행하려는 명령문
}",
정의,B_LV1,c,swith문,swtich문 조건문,switch문,{B_LV1}에 대해 알려줘,"답변: switch문은 비교할 변수가 어떤 값을 가지는지에 따라 명령문이 실행됩니다. If문은 <, >, <=, >= 과 같은 조건을 비교할 수 있는데 반해, switch문은 == 조건만 판단할 수 있습니다. 그러나 if문보다 더 간결한 코드를 작성할 수 있다는 장점이 있습니다. 
예시)
switch(변수){
    case 값1 : 
        명령문 
        break;
    case 값2 : 
        명령문
        break;  
    default :   //위의 모든 케이스에 해당하지 않는 경우 실행됩니다.
        명령문    
}",
정의,B_LV1,c,switch,,,{B_LV1}에 대해 알려줘,"답변: switch문은 비교할 변수가 어떤 값을 가지는지에 따라 명령문이 실행됩니다. If문은 <, >, <=, >= 과 같은 조건을 비교할 수 있는데 반해, switch문은 == 조건만 판단할 수 있습니다. 그러나 if문보다 더 간결한 코드를 작성할 수 있다는 장점이 있습니다. 
예시)
switch(변수){
    case 값1 : 
        명령문 
        break;
    case 값2 : 
        명령문
        break;  
    default :   //위의 모든 케이스에 해당하지 않는 경우 실행됩니다.
        명령문    
}",
정의,B_LV1,c,반복문,,,{B_LV2}에 대해 알려줘,"답변: 반복문이란 특정 명령을 반복적으로 수행하도록 제어하는 명령문 입니다. 대표적으로 while문, do while문, for문이 있습니다.",
정의,B_LV1,c,while문,while문 반복문,while문,{B_LV3}에 대해 알려줘,"답변: while문은 반복문의 일종입니다. While문의 조건이 참이면 코드를 계속 반복합니다. While문 안의 명령문이 한번 실행되기 전마다 조건이 참인지 체크합니다. 만약 조건이 거짓일경우 반복을 멈추고 while문을 빠져나옵니다. 조건문을 잘못 작성하는 경우 반복문에서 빠져나오지 못하는 무한반복문이 생성될 수 있으니 종료 조건을 잘 작성하는 것이 중요합니다.\n
예시) \n
while(조건){\n
     반복해서 실행할 명령문\n
}",
정의,B_LV1,c,for문,for문 반복문,for문,{B_LV4}에 대해 알려줘,"답변: for문은 반복 횟수가 정해져 있는 경우 주로 사용하는 반복문입니다. 초기문, 조건문, 증감문 으로 구성되어 있습니다. 초기문에서 설정한 값에서부터 증감문에서 설정한 만큼씩을 증감시키는 것을 반복하다가 해당 값이 조건문에서 거짓이 되면 반복을 종료합니다. 형식은 다음과 같습니다.\n
for(초기문; 조건문; 증감문){\n
     반복해서 실행할 명령문\n
}\n
\n
예시) \n
for(int i=0; i<=10; i++){\n
      printf(""반복문 실행\n"");\n
}\n
설명) i가 0일때부터 10이 될 때까지 1씩 증가하면서 ""반복문 실행""을 출력한다. i가 11이 되면 조건이 거짓이 되기 때문에 반복을 종료한다. 즉 명령문은 i가 0일때부터 10일때까지 11번 실행된다.",
정의,B_LV1,c,이중 반복문,이중반복문 이중for문,이중 for문,{B_LV5}에 대해 알려줘,"답변: 이중 반복문이란 두개의 반복문이 중첩된 것으로, 반복문 안에 반복문이 들어가 있는 것입니다. 이중반복문 중에서 For문이 중첩된 것을 이중 for문 이라고 합니다. \n
예시)\n
for(int i=0; i<5; i++){\n
      for(int j=0; j<10; j++){\n
	      printf(“Hello world!”);\n
      }\n
}",
정의,B_LV1,c,이중 for문,,,{B_LV5}에 대해 알려줘,"답변: 이중 반복문이란 두개의 반복문이 중첩된 것으로, 반복문 안에 반복문이 들어가 있는 것입니다. 이중반복문 중에서 For문이 중첩된 것을 이중 for문 이라고 합니다. \n
예시)\n
for(int i=0; i<5; i++){\n
      for(int j=0; j<10; j++){\n
	      printf(“Hello world!”);\n
      }\n
}",
정의,B_LV1,c,배열,배열,배열,{B_LV6}에 대해 알려줘,"답변: 배열이란 한가지 자료형을 연속적으로 나열하는 것으로, 같은 자료형의 변수들을 필요한 만큼 한번에 만들어 사용할 수 있습니다. 선언은 자료형 변수이름[개수]; 와 같이 사용하면 됩니다. \n
만약 크기가 5이고 이름이 x인 정수형 배열을 선언하려면 int x[5]; 와 같이 작성하면 됩니다. 이때 각 변수는 x[0], x[1], x[2], x[3], x[4] 가 됩니다. 괄호 안의 숫자를 인덱스라고 하며 배열의 인덱스는 항상 0부터 시작합니다.",
정의,B_LV1,c,배열 초기화,배열 초기화,배열 초기화,{B_LV7}에 대해 알려줘,"답변: 배열을 초기화 하는 방법은 다음과 같습니다.\n
x[5] = {1,2,3,4,5};\n
만약 배열을 초기화 하지 않으면 쓰레기값이 저장되게 됩니다. ",
정의,B_LV1,c,다차원 배열,다차원 배열 2자원배열,다차원 배열,{B_LV8}에 대해 알려줘,"\n
답변: 다차원 배열은 2차원 이상의 배열을 의미하며 변수를 구분하는 인덱스를 2개 이상 사용하는 것을 나타냅니다. \n
2차원 배열의 경우 자료형 배열이름[열의 길이][행의 길이] 와 같은 형식으로 나타낼 수 있습니다. 이때, 변수의 개수는 열의 길이 x 행의 길이가 됩니다.\n
\n
예시) int score[2][3] = {{10,20,50},{20,30,40}}; \n
설명) 다음과 같이 배열을 선언 및 초기화 하였을 때 각 변수의 값은 다음과 같습니다.\n
score[0][0] = 10\n
score[0][1] = 20\n
score[0][2] = 50\n
score[1][0] = 20\n
score[1][1] = 30\n
score[1][2] = 40\n
",
정의,B_LV1,c,2차원 배열 출력,,,{B_LV8}에 대해 알려줘,"\n
답변: 다차원 배열은 2차원 이상의 배열을 의미하며 변수를 구분하는 인덱스를 2개 이상 사용하는 것을 나타냅니다. \n
2차원 배열의 경우 자료형 배열이름[열의 길이][행의 길이] 와 같은 형식으로 나타낼 수 있습니다. 이때, 변수의 개수는 열의 길이 x 행의 길이가 됩니다.\n
\n
예시) int score[2][3] = {{10,20,50},{20,30,40}}; \n
설명) 다음과 같이 배열을 선언 및 초기화 하였을 때 각 변수의 값은 다음과 같습니다.\n
score[0][0] = 10\n
score[0][1] = 20\n
score[0][2] = 50\n
score[1][0] = 20\n
score[1][1] = 30\n
score[1][2] = 40\n
",
정의,B_LV1,c,배열 출력,배열 출력,배열 출력,{B_LV9}에 대해 알려줘,"답변: 배열을 출력할 때에는 반복문을 사용하면 편리하게 출력할 수 있습니다. \n
예시)\n
int x[5] = {1,2,3,4,5};\n
for(int i=0; i<5; i++){\n
   printf("" %d"", x[i]); \n
}",
정의,B_LV1,c,2차원 배열 출력,2차원 배열 출력,2차원 배열 출력,{B_LV10}에 대해 알려줘,"답변: 2차원 배열을 출력할 때에 다음과 같이 이중 반복문을 사용할 수 있습니다.\n
\n
예시)\n
int score[2][3] = {{10,20,50},{20,30,40}}; \n
for(int i=0; i<2; i++){\n
   for(int j=0; j<3; j++){\n
      printf("" %d"", x[i][j]);\n
   }\n
}",
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
